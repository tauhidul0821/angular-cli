// 1

if ('NG_CLI_ANALYTICS' in process.env) {
    return;
  }



// 2
try {
    process.title = 'ng ' + Array.from(process.argv).slice(2).join(' ');
  } catch (_) {
    // If an error happened above, use the most basic title.
    process.title = 'ng';
  }


  // 3

//   export declare class AnalyticsCommand extends Command<AnalyticsCommandSchema> {
//     run(options: AnalyticsCommandSchema & Arguments): Promise<0 | 1 | 2 | 3 | 4>;
// }

// 4.
"use strict";
// THIS FILE IS AUTOMATICALLY GENERATED. TO UPDATE THIS FILE YOU NEED TO CHANGE THE
// CORRESPONDING JSON SCHEMA FILE, THEN RUN devkit-admin build (or bazel build ...).
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpEnum = void 0;
var HelpEnum;
(function (HelpEnum) {
    HelpEnum["HelpJson"] = "JSON";
    HelpEnum["Json"] = "json";
})(HelpEnum = exports.HelpEnum || (exports.HelpEnum = {}));



// 5.

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));



// 6.



function pickOne(of) {
    return of[Math.floor(Math.random() * of.length)];
}
class AwesomeCommand extends command_1.Command {
    async run() {
        const phrase = pickOne([
            `You're on it, there's nothing for me to do!`,
            `Let's take a look... nope, it's all good!`,
            `You're doing fine.`,
            `You're already doing great.`,
            `Nothing to do; already awesome. Exiting.`,
            `Error 418: As Awesome As Can Get.`,
            `I spy with my little eye a great developer!`,
            `Noop... already awesome.`,
        ]);
        this.logger.info(color_1.colors.green(phrase));
    }
}
exports.AwesomeCommand = AwesomeCommand;


// 7.


class ServeCommand extends architect_command_1.ArchitectCommand {
    constructor() {
        super(...arguments);
        this.target = 'serve';
    }
    validate() {
        return true;
    }
    async run(options) {
        return this.runArchitectTarget(options);
    }
}
exports.ServeCommand = ServeCommand;






































